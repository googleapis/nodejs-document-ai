// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta3/document_processor_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './document_processor_service_client_config.json';
import { operationsProtos } from 'google-gax';
const version = require('../../../package.json').version;

/**
 *  Service to call Cloud DocumentAI to process documents according to the
 *  processor's definition. Processors are built using state-of-the-art Google
 *  AI such as natural language, computer vision, and translation to extract
 *  structured information from unstructured or semi-structured documents.
 * @class
 * @memberof v1beta3
 */
export class DocumentProcessorServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  documentProcessorServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of DocumentProcessorServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof DocumentProcessorServiceClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      humanReviewConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/processors/{processor}/humanReviewConfig'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      processorPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/processors/{processor}'
      ),
      processorTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/processorTypes/{processor_type}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listProcessors:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'processors')
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.

    this.operationsClient = this._gaxModule.lro({
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    }).operationsClient(opts);
    const batchProcessDocumentsResponse = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1beta3.BatchProcessResponse') as gax.protobuf.Type;
    const batchProcessDocumentsMetadata = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1beta3.BatchProcessMetadata') as gax.protobuf.Type;
    const deleteProcessorResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteProcessorMetadata = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1beta3.DeleteProcessorMetadata') as gax.protobuf.Type;
    const enableProcessorResponse = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1beta3.EnableProcessorResponse') as gax.protobuf.Type;
    const enableProcessorMetadata = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1beta3.EnableProcessorMetadata') as gax.protobuf.Type;
    const disableProcessorResponse = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1beta3.DisableProcessorResponse') as gax.protobuf.Type;
    const disableProcessorMetadata = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1beta3.DisableProcessorMetadata') as gax.protobuf.Type;
    const reviewDocumentResponse = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1beta3.ReviewDocumentResponse') as gax.protobuf.Type;
    const reviewDocumentMetadata = protoFilesRoot.lookup(
      '.google.cloud.documentai.v1beta3.ReviewDocumentOperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      batchProcessDocuments: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        batchProcessDocumentsResponse.decode.bind(batchProcessDocumentsResponse),
        batchProcessDocumentsMetadata.decode.bind(batchProcessDocumentsMetadata)),
      deleteProcessor: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteProcessorResponse.decode.bind(deleteProcessorResponse),
        deleteProcessorMetadata.decode.bind(deleteProcessorMetadata)),
      enableProcessor: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        enableProcessorResponse.decode.bind(enableProcessorResponse),
        enableProcessorMetadata.decode.bind(enableProcessorMetadata)),
      disableProcessor: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        disableProcessorResponse.decode.bind(disableProcessorResponse),
        disableProcessorMetadata.decode.bind(disableProcessorMetadata)),
      reviewDocument: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        reviewDocumentResponse.decode.bind(reviewDocumentResponse),
        reviewDocumentMetadata.decode.bind(reviewDocumentMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.documentai.v1beta3.DocumentProcessorService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.documentProcessorServiceStub) {
      return this.documentProcessorServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.documentai.v1beta3.DocumentProcessorService.
    this.documentProcessorServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.documentai.v1beta3.DocumentProcessorService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.documentai.v1beta3.DocumentProcessorService,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const documentProcessorServiceStubMethods =
        ['processDocument', 'batchProcessDocuments', 'fetchProcessorTypes', 'listProcessors', 'createProcessor', 'deleteProcessor', 'enableProcessor', 'disableProcessor', 'reviewDocument'];
    for (const methodName of documentProcessorServiceStubMethods) {
      const callPromise = this.documentProcessorServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.documentProcessorServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'documentai.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'documentai.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  processDocument(
      request: protos.google.cloud.documentai.v1beta3.IProcessRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.documentai.v1beta3.IProcessResponse,
        protos.google.cloud.documentai.v1beta3.IProcessRequest|undefined, {}|undefined
      ]>;
  processDocument(
      request: protos.google.cloud.documentai.v1beta3.IProcessRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.documentai.v1beta3.IProcessResponse,
          protos.google.cloud.documentai.v1beta3.IProcessRequest|null|undefined,
          {}|null|undefined>): void;
  processDocument(
      request: protos.google.cloud.documentai.v1beta3.IProcessRequest,
      callback: Callback<
          protos.google.cloud.documentai.v1beta3.IProcessResponse,
          protos.google.cloud.documentai.v1beta3.IProcessRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Processes a single document.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.documentai.v1beta3.Document} request.inlineDocument
 *   An inline document proto.
 * @param {google.cloud.documentai.v1beta3.RawDocument} request.rawDocument
 *   A raw document content (bytes).
 * @param {string} request.name
 *   Required. The processor resource name.
 * @param {google.cloud.documentai.v1beta3.Document} request.document
 *   The document payload, the [content] and [mime_type] fields must be set.
 * @param {boolean} request.skipHumanReview
 *   Whether Human Review feature should be skipped for this request. Default to
 *   false.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ProcessResponse]{@link google.cloud.documentai.v1beta3.ProcessResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.processDocument(request);
 */
  processDocument(
      request: protos.google.cloud.documentai.v1beta3.IProcessRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.documentai.v1beta3.IProcessResponse,
          protos.google.cloud.documentai.v1beta3.IProcessRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.documentai.v1beta3.IProcessResponse,
          protos.google.cloud.documentai.v1beta3.IProcessRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.documentai.v1beta3.IProcessResponse,
        protos.google.cloud.documentai.v1beta3.IProcessRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.processDocument(request, options, callback);
  }
  fetchProcessorTypes(
      request: protos.google.cloud.documentai.v1beta3.IFetchProcessorTypesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.documentai.v1beta3.IFetchProcessorTypesResponse,
        protos.google.cloud.documentai.v1beta3.IFetchProcessorTypesRequest|undefined, {}|undefined
      ]>;
  fetchProcessorTypes(
      request: protos.google.cloud.documentai.v1beta3.IFetchProcessorTypesRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.documentai.v1beta3.IFetchProcessorTypesResponse,
          protos.google.cloud.documentai.v1beta3.IFetchProcessorTypesRequest|null|undefined,
          {}|null|undefined>): void;
  fetchProcessorTypes(
      request: protos.google.cloud.documentai.v1beta3.IFetchProcessorTypesRequest,
      callback: Callback<
          protos.google.cloud.documentai.v1beta3.IFetchProcessorTypesResponse,
          protos.google.cloud.documentai.v1beta3.IFetchProcessorTypesRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Fetches processor types.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project of processor type to list.
 *   Format: projects/{project}/locations/{location}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [FetchProcessorTypesResponse]{@link google.cloud.documentai.v1beta3.FetchProcessorTypesResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.fetchProcessorTypes(request);
 */
  fetchProcessorTypes(
      request: protos.google.cloud.documentai.v1beta3.IFetchProcessorTypesRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.documentai.v1beta3.IFetchProcessorTypesResponse,
          protos.google.cloud.documentai.v1beta3.IFetchProcessorTypesRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.documentai.v1beta3.IFetchProcessorTypesResponse,
          protos.google.cloud.documentai.v1beta3.IFetchProcessorTypesRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.documentai.v1beta3.IFetchProcessorTypesResponse,
        protos.google.cloud.documentai.v1beta3.IFetchProcessorTypesRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.fetchProcessorTypes(request, options, callback);
  }
  createProcessor(
      request: protos.google.cloud.documentai.v1beta3.ICreateProcessorRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.documentai.v1beta3.IProcessor,
        protos.google.cloud.documentai.v1beta3.ICreateProcessorRequest|undefined, {}|undefined
      ]>;
  createProcessor(
      request: protos.google.cloud.documentai.v1beta3.ICreateProcessorRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.documentai.v1beta3.IProcessor,
          protos.google.cloud.documentai.v1beta3.ICreateProcessorRequest|null|undefined,
          {}|null|undefined>): void;
  createProcessor(
      request: protos.google.cloud.documentai.v1beta3.ICreateProcessorRequest,
      callback: Callback<
          protos.google.cloud.documentai.v1beta3.IProcessor,
          protos.google.cloud.documentai.v1beta3.ICreateProcessorRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a processor from the type processor that the user chose.
 * The processor will be at "ENABLED" state by default after its creation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent (project and location) under which to create the processor.
 *   Format: projects/{project}/locations/{location}
 * @param {google.cloud.documentai.v1beta3.Processor} request.processor
 *   Required. The processor to be created, requires [processor_type] and [display_name]
 *   to be set. Also, the processor is under CMEK if CMEK fields are set.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Processor]{@link google.cloud.documentai.v1beta3.Processor}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createProcessor(request);
 */
  createProcessor(
      request: protos.google.cloud.documentai.v1beta3.ICreateProcessorRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.documentai.v1beta3.IProcessor,
          protos.google.cloud.documentai.v1beta3.ICreateProcessorRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.documentai.v1beta3.IProcessor,
          protos.google.cloud.documentai.v1beta3.ICreateProcessorRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.documentai.v1beta3.IProcessor,
        protos.google.cloud.documentai.v1beta3.ICreateProcessorRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createProcessor(request, options, callback);
  }

  batchProcessDocuments(
      request: protos.google.cloud.documentai.v1beta3.IBatchProcessRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.documentai.v1beta3.IBatchProcessResponse, protos.google.cloud.documentai.v1beta3.IBatchProcessMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  batchProcessDocuments(
      request: protos.google.cloud.documentai.v1beta3.IBatchProcessRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.documentai.v1beta3.IBatchProcessResponse, protos.google.cloud.documentai.v1beta3.IBatchProcessMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  batchProcessDocuments(
      request: protos.google.cloud.documentai.v1beta3.IBatchProcessRequest,
      callback: Callback<
          LROperation<protos.google.cloud.documentai.v1beta3.IBatchProcessResponse, protos.google.cloud.documentai.v1beta3.IBatchProcessMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * LRO endpoint to batch process many documents. The output is written
 * to Cloud Storage as JSON in the [Document] format.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The processor resource name.
 * @param {number[]} request.inputConfigs
 *   The input config for each single document in the batch process.
 * @param {google.cloud.documentai.v1beta3.BatchProcessRequest.BatchOutputConfig} request.outputConfig
 *   The overall output config for batch process.
 * @param {google.cloud.documentai.v1beta3.BatchDocumentsInputConfig} request.inputDocuments
 *   The input documents for batch process.
 * @param {google.cloud.documentai.v1beta3.DocumentOutputConfig} request.documentOutputConfig
 *   The overall output config for batch process.
 * @param {boolean} request.skipHumanReview
 *   Whether Human Review feature should be skipped for this request. Default to
 *   false.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.batchProcessDocuments(request);
 * const [response] = await operation.promise();
 */
  batchProcessDocuments(
      request: protos.google.cloud.documentai.v1beta3.IBatchProcessRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.documentai.v1beta3.IBatchProcessResponse, protos.google.cloud.documentai.v1beta3.IBatchProcessMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.documentai.v1beta3.IBatchProcessResponse, protos.google.cloud.documentai.v1beta3.IBatchProcessMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.documentai.v1beta3.IBatchProcessResponse, protos.google.cloud.documentai.v1beta3.IBatchProcessMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.batchProcessDocuments(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `batchProcessDocuments()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkBatchProcessDocumentsProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkBatchProcessDocumentsProgress(name: string): Promise<LROperation<protos.google.cloud.documentai.v1beta3.BatchProcessResponse, protos.google.cloud.documentai.v1beta3.BatchProcessMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.batchProcessDocuments, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.documentai.v1beta3.BatchProcessResponse, protos.google.cloud.documentai.v1beta3.BatchProcessMetadata>;
  }
  deleteProcessor(
      request: protos.google.cloud.documentai.v1beta3.IDeleteProcessorRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.documentai.v1beta3.IDeleteProcessorMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteProcessor(
      request: protos.google.cloud.documentai.v1beta3.IDeleteProcessorRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.documentai.v1beta3.IDeleteProcessorMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteProcessor(
      request: protos.google.cloud.documentai.v1beta3.IDeleteProcessorRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.documentai.v1beta3.IDeleteProcessorMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes the processor, unloads all deployed model artifacts if it was
 * enabled and then deletes all artifacts associated with this processor.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The processor resource name to be deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.deleteProcessor(request);
 * const [response] = await operation.promise();
 */
  deleteProcessor(
      request: protos.google.cloud.documentai.v1beta3.IDeleteProcessorRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.documentai.v1beta3.IDeleteProcessorMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.documentai.v1beta3.IDeleteProcessorMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.documentai.v1beta3.IDeleteProcessorMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteProcessor(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteProcessor()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkDeleteProcessorProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkDeleteProcessorProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.documentai.v1beta3.DeleteProcessorMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deleteProcessor, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.documentai.v1beta3.DeleteProcessorMetadata>;
  }
  enableProcessor(
      request: protos.google.cloud.documentai.v1beta3.IEnableProcessorRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.documentai.v1beta3.IEnableProcessorResponse, protos.google.cloud.documentai.v1beta3.IEnableProcessorMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  enableProcessor(
      request: protos.google.cloud.documentai.v1beta3.IEnableProcessorRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.documentai.v1beta3.IEnableProcessorResponse, protos.google.cloud.documentai.v1beta3.IEnableProcessorMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  enableProcessor(
      request: protos.google.cloud.documentai.v1beta3.IEnableProcessorRequest,
      callback: Callback<
          LROperation<protos.google.cloud.documentai.v1beta3.IEnableProcessorResponse, protos.google.cloud.documentai.v1beta3.IEnableProcessorMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Enables a processor
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The processor resource name to be enabled.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.enableProcessor(request);
 * const [response] = await operation.promise();
 */
  enableProcessor(
      request: protos.google.cloud.documentai.v1beta3.IEnableProcessorRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.documentai.v1beta3.IEnableProcessorResponse, protos.google.cloud.documentai.v1beta3.IEnableProcessorMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.documentai.v1beta3.IEnableProcessorResponse, protos.google.cloud.documentai.v1beta3.IEnableProcessorMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.documentai.v1beta3.IEnableProcessorResponse, protos.google.cloud.documentai.v1beta3.IEnableProcessorMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.enableProcessor(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `enableProcessor()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkEnableProcessorProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkEnableProcessorProgress(name: string): Promise<LROperation<protos.google.cloud.documentai.v1beta3.EnableProcessorResponse, protos.google.cloud.documentai.v1beta3.EnableProcessorMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.enableProcessor, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.documentai.v1beta3.EnableProcessorResponse, protos.google.cloud.documentai.v1beta3.EnableProcessorMetadata>;
  }
  disableProcessor(
      request: protos.google.cloud.documentai.v1beta3.IDisableProcessorRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.documentai.v1beta3.IDisableProcessorResponse, protos.google.cloud.documentai.v1beta3.IDisableProcessorMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  disableProcessor(
      request: protos.google.cloud.documentai.v1beta3.IDisableProcessorRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.documentai.v1beta3.IDisableProcessorResponse, protos.google.cloud.documentai.v1beta3.IDisableProcessorMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  disableProcessor(
      request: protos.google.cloud.documentai.v1beta3.IDisableProcessorRequest,
      callback: Callback<
          LROperation<protos.google.cloud.documentai.v1beta3.IDisableProcessorResponse, protos.google.cloud.documentai.v1beta3.IDisableProcessorMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Disables a processor
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The processor resource name to be disabled.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.disableProcessor(request);
 * const [response] = await operation.promise();
 */
  disableProcessor(
      request: protos.google.cloud.documentai.v1beta3.IDisableProcessorRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.documentai.v1beta3.IDisableProcessorResponse, protos.google.cloud.documentai.v1beta3.IDisableProcessorMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.documentai.v1beta3.IDisableProcessorResponse, protos.google.cloud.documentai.v1beta3.IDisableProcessorMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.documentai.v1beta3.IDisableProcessorResponse, protos.google.cloud.documentai.v1beta3.IDisableProcessorMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.disableProcessor(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `disableProcessor()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkDisableProcessorProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkDisableProcessorProgress(name: string): Promise<LROperation<protos.google.cloud.documentai.v1beta3.DisableProcessorResponse, protos.google.cloud.documentai.v1beta3.DisableProcessorMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.disableProcessor, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.documentai.v1beta3.DisableProcessorResponse, protos.google.cloud.documentai.v1beta3.DisableProcessorMetadata>;
  }
  reviewDocument(
      request: protos.google.cloud.documentai.v1beta3.IReviewDocumentRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.documentai.v1beta3.IReviewDocumentResponse, protos.google.cloud.documentai.v1beta3.IReviewDocumentOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  reviewDocument(
      request: protos.google.cloud.documentai.v1beta3.IReviewDocumentRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.documentai.v1beta3.IReviewDocumentResponse, protos.google.cloud.documentai.v1beta3.IReviewDocumentOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  reviewDocument(
      request: protos.google.cloud.documentai.v1beta3.IReviewDocumentRequest,
      callback: Callback<
          LROperation<protos.google.cloud.documentai.v1beta3.IReviewDocumentResponse, protos.google.cloud.documentai.v1beta3.IReviewDocumentOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Send a document for Human Review. The input document should be processed by
 * the specified processor.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.documentai.v1beta3.Document} request.inlineDocument
 *   An inline document proto.
 * @param {string} request.humanReviewConfig
 *   Required. The resource name of the HumanReviewConfig that the document will be
 *   reviewed with.
 * @param {google.cloud.documentai.v1beta3.Document} request.document
 *   The document that needs human review.
 * @param {boolean} request.enableSchemaValidation
 *   Whether the validation should be performed on the ad-hoc review request.
 * @param {google.cloud.documentai.v1beta3.ReviewDocumentRequest.Priority} request.priority
 *   The priority of the human review task.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.reviewDocument(request);
 * const [response] = await operation.promise();
 */
  reviewDocument(
      request: protos.google.cloud.documentai.v1beta3.IReviewDocumentRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.documentai.v1beta3.IReviewDocumentResponse, protos.google.cloud.documentai.v1beta3.IReviewDocumentOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.documentai.v1beta3.IReviewDocumentResponse, protos.google.cloud.documentai.v1beta3.IReviewDocumentOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.documentai.v1beta3.IReviewDocumentResponse, protos.google.cloud.documentai.v1beta3.IReviewDocumentOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'human_review_config': request.humanReviewConfig || '',
    });
    this.initialize();
    return this.innerApiCalls.reviewDocument(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `reviewDocument()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkReviewDocumentProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkReviewDocumentProgress(name: string): Promise<LROperation<protos.google.cloud.documentai.v1beta3.ReviewDocumentResponse, protos.google.cloud.documentai.v1beta3.ReviewDocumentOperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.reviewDocument, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.documentai.v1beta3.ReviewDocumentResponse, protos.google.cloud.documentai.v1beta3.ReviewDocumentOperationMetadata>;
  }
  listProcessors(
      request: protos.google.cloud.documentai.v1beta3.IListProcessorsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.documentai.v1beta3.IProcessor[],
        protos.google.cloud.documentai.v1beta3.IListProcessorsRequest|null,
        protos.google.cloud.documentai.v1beta3.IListProcessorsResponse
      ]>;
  listProcessors(
      request: protos.google.cloud.documentai.v1beta3.IListProcessorsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.documentai.v1beta3.IListProcessorsRequest,
          protos.google.cloud.documentai.v1beta3.IListProcessorsResponse|null|undefined,
          protos.google.cloud.documentai.v1beta3.IProcessor>): void;
  listProcessors(
      request: protos.google.cloud.documentai.v1beta3.IListProcessorsRequest,
      callback: PaginationCallback<
          protos.google.cloud.documentai.v1beta3.IListProcessorsRequest,
          protos.google.cloud.documentai.v1beta3.IListProcessorsResponse|null|undefined,
          protos.google.cloud.documentai.v1beta3.IProcessor>): void;
/**
 * Lists all processors which belong to this project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent (project and location) which owns this collection of Processors.
 *   Format: projects/{project}/locations/{location}
 * @param {number} request.pageSize
 *   The maximum number of processors to return.
 *   If unspecified, at most 50 processors will be returned.
 *   The maximum value is 100; values above 100 will be coerced to 100.
 * @param {string} request.pageToken
 *   We will return the processors sorted by creation time. The page token
 *   will point to the next processor.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Processor]{@link google.cloud.documentai.v1beta3.Processor}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listProcessorsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listProcessors(
      request: protos.google.cloud.documentai.v1beta3.IListProcessorsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.documentai.v1beta3.IListProcessorsRequest,
          protos.google.cloud.documentai.v1beta3.IListProcessorsResponse|null|undefined,
          protos.google.cloud.documentai.v1beta3.IProcessor>,
      callback?: PaginationCallback<
          protos.google.cloud.documentai.v1beta3.IListProcessorsRequest,
          protos.google.cloud.documentai.v1beta3.IListProcessorsResponse|null|undefined,
          protos.google.cloud.documentai.v1beta3.IProcessor>):
      Promise<[
        protos.google.cloud.documentai.v1beta3.IProcessor[],
        protos.google.cloud.documentai.v1beta3.IListProcessorsRequest|null,
        protos.google.cloud.documentai.v1beta3.IListProcessorsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listProcessors(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent (project and location) which owns this collection of Processors.
 *   Format: projects/{project}/locations/{location}
 * @param {number} request.pageSize
 *   The maximum number of processors to return.
 *   If unspecified, at most 50 processors will be returned.
 *   The maximum value is 100; values above 100 will be coerced to 100.
 * @param {string} request.pageToken
 *   We will return the processors sorted by creation time. The page token
 *   will point to the next processor.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Processor]{@link google.cloud.documentai.v1beta3.Processor} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listProcessorsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listProcessorsStream(
      request?: protos.google.cloud.documentai.v1beta3.IListProcessorsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listProcessors.createStream(
      this.innerApiCalls.listProcessors as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listProcessors`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent (project and location) which owns this collection of Processors.
 *   Format: projects/{project}/locations/{location}
 * @param {number} request.pageSize
 *   The maximum number of processors to return.
 *   If unspecified, at most 50 processors will be returned.
 *   The maximum value is 100; values above 100 will be coerced to 100.
 * @param {string} request.pageToken
 *   We will return the processors sorted by creation time. The page token
 *   will point to the next processor.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Processor]{@link google.cloud.documentai.v1beta3.Processor}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listProcessorsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listProcessorsAsync(
      request?: protos.google.cloud.documentai.v1beta3.IListProcessorsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.documentai.v1beta3.IProcessor>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listProcessors.asyncIterate(
      this.innerApiCalls['listProcessors'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.documentai.v1beta3.IProcessor>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified humanReviewConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} processor
   * @returns {string} Resource name string.
   */
  humanReviewConfigPath(project:string,location:string,processor:string) {
    return this.pathTemplates.humanReviewConfigPathTemplate.render({
      project: project,
      location: location,
      processor: processor,
    });
  }

  /**
   * Parse the project from HumanReviewConfig resource.
   *
   * @param {string} humanReviewConfigName
   *   A fully-qualified path representing HumanReviewConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromHumanReviewConfigName(humanReviewConfigName: string) {
    return this.pathTemplates.humanReviewConfigPathTemplate.match(humanReviewConfigName).project;
  }

  /**
   * Parse the location from HumanReviewConfig resource.
   *
   * @param {string} humanReviewConfigName
   *   A fully-qualified path representing HumanReviewConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromHumanReviewConfigName(humanReviewConfigName: string) {
    return this.pathTemplates.humanReviewConfigPathTemplate.match(humanReviewConfigName).location;
  }

  /**
   * Parse the processor from HumanReviewConfig resource.
   *
   * @param {string} humanReviewConfigName
   *   A fully-qualified path representing HumanReviewConfig resource.
   * @returns {string} A string representing the processor.
   */
  matchProcessorFromHumanReviewConfigName(humanReviewConfigName: string) {
    return this.pathTemplates.humanReviewConfigPathTemplate.match(humanReviewConfigName).processor;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project:string,location:string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified processor resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} processor
   * @returns {string} Resource name string.
   */
  processorPath(project:string,location:string,processor:string) {
    return this.pathTemplates.processorPathTemplate.render({
      project: project,
      location: location,
      processor: processor,
    });
  }

  /**
   * Parse the project from Processor resource.
   *
   * @param {string} processorName
   *   A fully-qualified path representing Processor resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProcessorName(processorName: string) {
    return this.pathTemplates.processorPathTemplate.match(processorName).project;
  }

  /**
   * Parse the location from Processor resource.
   *
   * @param {string} processorName
   *   A fully-qualified path representing Processor resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProcessorName(processorName: string) {
    return this.pathTemplates.processorPathTemplate.match(processorName).location;
  }

  /**
   * Parse the processor from Processor resource.
   *
   * @param {string} processorName
   *   A fully-qualified path representing Processor resource.
   * @returns {string} A string representing the processor.
   */
  matchProcessorFromProcessorName(processorName: string) {
    return this.pathTemplates.processorPathTemplate.match(processorName).processor;
  }

  /**
   * Return a fully-qualified processorType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} processor_type
   * @returns {string} Resource name string.
   */
  processorTypePath(project:string,location:string,processorType:string) {
    return this.pathTemplates.processorTypePathTemplate.render({
      project: project,
      location: location,
      processor_type: processorType,
    });
  }

  /**
   * Parse the project from ProcessorType resource.
   *
   * @param {string} processorTypeName
   *   A fully-qualified path representing ProcessorType resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProcessorTypeName(processorTypeName: string) {
    return this.pathTemplates.processorTypePathTemplate.match(processorTypeName).project;
  }

  /**
   * Parse the location from ProcessorType resource.
   *
   * @param {string} processorTypeName
   *   A fully-qualified path representing ProcessorType resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProcessorTypeName(processorTypeName: string) {
    return this.pathTemplates.processorTypePathTemplate.match(processorTypeName).location;
  }

  /**
   * Parse the processor_type from ProcessorType resource.
   *
   * @param {string} processorTypeName
   *   A fully-qualified path representing ProcessorType resource.
   * @returns {string} A string representing the processor_type.
   */
  matchProcessorTypeFromProcessorTypeName(processorTypeName: string) {
    return this.pathTemplates.processorTypePathTemplate.match(processorTypeName).processor_type;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.documentProcessorServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
